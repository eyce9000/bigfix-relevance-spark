package com.bigfix.schemas.relevance;

import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 2.7.3
 * 2013-03-06T10:01:11.392-06:00
 * Generated source version: 2.7.3
 * 
 */
@WebServiceClient(name = "WebReportsService", 
                  wsdlLocation = "webreports.wsdl",
                  targetNamespace = "http://schemas.bigfix.com/Relevance") 
public class WebReportsService extends Service {


    public final static QName SERVICE = new QName("http://schemas.bigfix.com/Relevance", "WebReportsService");
    public final static QName DashboardVariablePort = new QName("http://schemas.bigfix.com/Relevance", "DashboardVariablePort");
    public final static QName RelevancePort = new QName("http://schemas.bigfix.com/Relevance", "RelevancePort");
    public final static QName UserManagementPort = new QName("http://schemas.bigfix.com/Relevance", "UserManagementPort");
    

    public WebReportsService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WebReportsService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }


    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public WebReportsService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public WebReportsService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns DashboardVariablePortType
     */
    @WebEndpoint(name = "DashboardVariablePort")
    public DashboardVariablePortType getDashboardVariablePort() {
        return super.getPort(DashboardVariablePort, DashboardVariablePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DashboardVariablePortType
     */
    @WebEndpoint(name = "DashboardVariablePort")
    public DashboardVariablePortType getDashboardVariablePort(WebServiceFeature... features) {
        return super.getPort(DashboardVariablePort, DashboardVariablePortType.class, features);
    }
    /**
     *
     * @return
     *     returns RelevancePortType
     */
    @WebEndpoint(name = "RelevancePort")
    public RelevancePortType getRelevancePort() {
        return super.getPort(RelevancePort, RelevancePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns RelevancePortType
     */
    @WebEndpoint(name = "RelevancePort")
    public RelevancePortType getRelevancePort(WebServiceFeature... features) {
        return super.getPort(RelevancePort, RelevancePortType.class, features);
    }
    /**
     *
     * @return
     *     returns UserManagementPortType
     */
    @WebEndpoint(name = "UserManagementPort")
    public UserManagementPortType getUserManagementPort() {
        return super.getPort(UserManagementPort, UserManagementPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UserManagementPortType
     */
    @WebEndpoint(name = "UserManagementPort")
    public UserManagementPortType getUserManagementPort(WebServiceFeature... features) {
        return super.getPort(UserManagementPort, UserManagementPortType.class, features);
    }

}
